/* automatically generated by rust-bindgen 0.69.4 */

pub const _CPP_CPPCONFIG_WRAPPER: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
pub const _GLIBCXX_RELEASE: u32 = 14;
pub const __GLIBCXX__: u32 = 20240620;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
pub const _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED: u32 = 1;
pub const _GLIBCXX_VERBOSE_ASSERT: u32 = 1;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
pub const _GLIBCXX_OS_DEFINES: u32 = 1;
pub const __NO_CTYPE: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 1;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const _GLIBCXX_HAVE_FLOAT128_MATH: u32 = 1;
pub const _GLIBCXX_MAY_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
pub const _GLIBCXX_USE_STD_SPEC_FUNCS: u32 = 1;
pub const _GLIBCXX_FAST_MATH: u32 = 0;
pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
pub const _PSTL_VERSION: u32 = 17000;
pub const _PSTL_VERSION_MAJOR: u32 = 17;
pub const _PSTL_VERSION_MINOR: u32 = 0;
pub const _PSTL_VERSION_PATCH: u32 = 0;
pub const _PSTL_USAGE_WARNINGS: u32 = 0;
pub const _PSTL_PRAGMA_LOCATION: &[u8; 26] = b" [Parallel STL message]: \0";
pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
pub const _GLIBCXX_HAVE_ARC4RANDOM: u32 = 1;
pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_C99_FLT_EVAL_TYPES: u32 = 1;
pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
pub const _GLIBCXX_HAVE_COSF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
pub const _GLIBCXX_HAVE_COSL: u32 = 1;
pub const _GLIBCXX_HAVE_DECL_STRNLEN: u32 = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
pub const _GLIBCXX_HAVE_DIRFD: u32 = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_FDOPENDIR: u32 = 1;
pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
pub const _GLIBCXX_HAVE_GETENTROPY: u32 = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
pub const _GLIBCXX_HAVE_GETS: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
pub const _GLIBCXX_HAVE_LINK: u32 = 1;
pub const _GLIBCXX_HAVE_LINK_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
pub const _GLIBCXX_HAVE_LSEEK: u32 = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
pub const _GLIBCXX_HAVE_MODF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
pub const _GLIBCXX_HAVE_OPENAT: u32 = 1;
pub const _GLIBCXX_HAVE_POLL: u32 = 1;
pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
pub const _GLIBCXX_HAVE_POWF: u32 = 1;
pub const _GLIBCXX_HAVE_POWL: u32 = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SECURE_GETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
pub const _GLIBCXX_HAVE_SINF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
pub const _GLIBCXX_HAVE_SINL: u32 = 1;
pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
pub const _GLIBCXX_HAVE_STACKTRACE: u32 = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_MMAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
pub const _GLIBCXX_HAVE_TANF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
pub const _GLIBCXX_HAVE_TANL: u32 = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
pub const _GLIBCXX_HAVE_TLS: u32 = 1;
pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNLINKAT: u32 = 1;
pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const _GLIBCXX_LT_OBJDIR: &[u8; 7] = b".libs/\0";
pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15] = b"package-unused\0";
pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30] = b"package-unused version-unused\0";
pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10] = b"libstdc++\0";
pub const _GLIBCXX_PACKAGE_URL: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15] = b"version-unused\0";
pub const _GLIBCXX_STDC_HEADERS: u32 = 1;
pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
pub const _GLIBCXX_CAN_ALIGNAS_DESTRUCTIVE_SIZE: u32 = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
pub const _GLIBCXX_RES_LIMITS: u32 = 1;
pub const _GLIBCXX_STDIO_EOF: i32 = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
pub const _GLIBCXX_SYMVER: u32 = 1;
pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
pub const _GLIBCXX_USE_C99: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_ARC: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_FUNCS: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
pub const _GLIBCXX_USE_CHDIR: u32 = 1;
pub const _GLIBCXX_USE_CHMOD: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
pub const _GLIBCXX_USE_FSEEKO_FTELLO: u32 = 1;
pub const _GLIBCXX_USE_GETCWD: u32 = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
pub const _GLIBCXX_USE_INIT_PRIORITY_ATTRIBUTE: u32 = 1;
pub const _GLIBCXX_USE_LFS: u32 = 1;
pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
pub const _GLIBCXX_USE_LSTAT: u32 = 1;
pub const _GLIBCXX_USE_MKDIR: u32 = 1;
pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
pub const _GLIBCXX_USE_NLS: u32 = 1;
pub const _GLIBCXX_USE_NL_LANGINFO_L: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
pub const _GLIBCXX_USE_REALPATH: u32 = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20: u32 = 1;
pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T: u32 = 1;
pub const _GLIBCXX_USE_UTIME: u32 = 1;
pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
pub const _GLIBCXX_VERBOSE: u32 = 1;
pub const _GLIBCXX_X86_RDRAND: u32 = 1;
pub const _GLIBCXX_X86_RDSEED: u32 = 1;
pub const _GLIBCXX_ZONEINFO_DIR: &[u8; 20] = b"/usr/share/zoneinfo\0";
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
pub const _GLIBCXX_CSTDARG: u32 = 1;
pub const _GLIBCXX_CSTDINT: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const _GLIBCXX_CSTDLIB: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub type std_nullptr_t = *const ::std::os::raw::c_void;
extern "C" {
    #[link_name = "\u{1}_ZSt21__glibcxx_assert_failPKciS0_S0_"]
    pub fn std___glibcxx_assert_fail(
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
        __function: *const ::std::os::raw::c_char,
        __condition: *const ::std::os::raw::c_char,
    ) -> !;
}
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::std::mem::MaybeUninit<div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtof32(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof32x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64x;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_strtol"]
    pub fn strtol1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_strtoul"]
    pub fn strtoul1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_strtoll"]
    pub fn strtoq1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_strtoull"]
    pub fn strtouq1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strfromd(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfroml(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: u128,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64x,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    const UNINIT: ::std::mem::MaybeUninit<__locale_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__locales) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_b) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_tolower) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_toupper) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__names) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strtol_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoll_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_strtol_l"]
    pub fn strtol_l1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_strtoul_l"]
    pub fn strtoul_l1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_strtoll_l"]
    pub fn strtoll_l1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_strtoull_l"]
    pub fn strtoull_l1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtod_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtold_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> u128;
}
extern "C" {
    pub fn strtof32_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof32x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64x;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type useconds_t = __useconds_t;
pub type suseconds_t = __suseconds_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_rwlock_arch_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    const UNINIT: ::std::mem::MaybeUninit<__once_flag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    const UNINIT: ::std::mem::MaybeUninit<random_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_deg) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_sep) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    const UNINIT: ::std::mem::MaybeUninit<drand48_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__old_x) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__c) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__init) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__a) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arc4random() -> __uint32_t;
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __size: usize);
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: __uint32_t) -> __uint32_t;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn secure_getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkostemp(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp64(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalize_file_name(
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type comparison_fn_t = __compar_fn_t;
pub type __compar_d_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_d_fn_t,
        __arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut u32,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const u32, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_openpt(__oflag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpt() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub const CharacterCategory_Body: CharacterCategory = 0;
pub const CharacterCategory_Hair: CharacterCategory = 1;
pub const CharacterCategory_Face: CharacterCategory = 2;
pub const CharacterCategory_Tail: CharacterCategory = 3;
pub const CharacterCategory_Ear: CharacterCategory = 4;
pub type CharacterCategory = u8;
pub const Gender_Male: Gender = 0;
pub const Gender_Female: Gender = 1;
#[doc = " Gender of the character."]
pub type Gender = u8;
#[doc = " Used for data that is language-agnostic, such as item data."]
pub const Language_None: Language = 0;
#[doc = " Japanese language."]
pub const Language_Japanese: Language = 1;
#[doc = " English language."]
pub const Language_English: Language = 2;
#[doc = " German language."]
pub const Language_German: Language = 3;
#[doc = " French language."]
pub const Language_French: Language = 4;
#[doc = " Chinese (Simplified) language."]
pub const Language_ChineseSimplified: Language = 5;
#[doc = " Chinese (Traditional) language."]
pub const Language_ChineseTraditional: Language = 6;
#[doc = " Korean language."]
pub const Language_Korean: Language = 7;
#[doc = " The language the game data is written for. Some of these languages are supported in the Global region."]
pub type Language = u8;
pub const Race_Hyur: Race = 0;
pub const Race_Elezen: Race = 1;
pub const Race_Lalafell: Race = 2;
pub const Race_Miqote: Race = 3;
pub const Race_Roegadyn: Race = 4;
pub const Race_AuRa: Race = 5;
pub const Race_Hrothgar: Race = 6;
pub const Race_Viera: Race = 7;
#[doc = " The major races of Eorzea."]
pub type Race = u8;
#[doc = " The head slot. Shorthand is \"met\"."]
pub const Slot_Head: Slot = 0;
#[doc = " The hands slot. Shorthand is \"glv\"."]
pub const Slot_Hands: Slot = 1;
#[doc = " The legs slot. Shorthand is \"dwn\"."]
pub const Slot_Legs: Slot = 2;
#[doc = " The feet slot. Shorthand is \"sho\"."]
pub const Slot_Feet: Slot = 3;
#[doc = " The body or chest slot. Shorthand is \"top\"."]
pub const Slot_Body: Slot = 4;
#[doc = " The earrings slot. Shorthand is \"ear\"."]
pub const Slot_Earring: Slot = 5;
#[doc = " The neck slot. Shorthand is \"nek\"."]
pub const Slot_Neck: Slot = 6;
#[doc = " The ring slot. Shorthand is \"rir\"."]
pub const Slot_Rings: Slot = 7;
#[doc = " The wrists slot. Shorthand is \"wrs\"."]
pub const Slot_Wrists: Slot = 8;
#[doc = " The slot the item is for."]
pub type Slot = u8;
pub const Subrace_Midlander: Subrace = 0;
pub const Subrace_Highlander: Subrace = 1;
pub const Subrace_Wildwood: Subrace = 2;
pub const Subrace_Duskwight: Subrace = 3;
pub const Subrace_Plainsfolk: Subrace = 4;
pub const Subrace_Dunesfolk: Subrace = 5;
pub const Subrace_Seeker: Subrace = 6;
pub const Subrace_Keeper: Subrace = 7;
pub const Subrace_SeaWolf: Subrace = 8;
pub const Subrace_Hellsguard: Subrace = 9;
pub const Subrace_Raen: Subrace = 10;
pub const Subrace_Xaela: Subrace = 11;
pub const Subrace_Hellion: Subrace = 12;
pub const Subrace_Lost: Subrace = 13;
pub const Subrace_Rava: Subrace = 14;
pub const Subrace_Veena: Subrace = 15;
#[doc = " The race's \"subrace\". Each race has two subraces, which are actually identical (even down to the ids!)\n with the exception of Hyurs, which have two unique subraces that are really two separate races."]
pub type Subrace = u8;
pub const TextureUsage_Sampler: TextureUsage = 0;
pub const TextureUsage_Sampler0: TextureUsage = 1;
pub const TextureUsage_Sampler1: TextureUsage = 2;
pub const TextureUsage_SamplerCatchlight: TextureUsage = 3;
pub const TextureUsage_SamplerColorMap0: TextureUsage = 4;
pub const TextureUsage_SamplerColorMap1: TextureUsage = 5;
pub const TextureUsage_SamplerDiffuse: TextureUsage = 6;
pub const TextureUsage_SamplerEnvMap: TextureUsage = 7;
pub const TextureUsage_SamplerMask: TextureUsage = 8;
pub const TextureUsage_SamplerNormal: TextureUsage = 9;
pub const TextureUsage_SamplerNormalMap0: TextureUsage = 10;
pub const TextureUsage_SamplerNormalMap1: TextureUsage = 11;
pub const TextureUsage_SamplerReflection: TextureUsage = 12;
pub const TextureUsage_SamplerSpecular: TextureUsage = 13;
pub const TextureUsage_SamplerSpecularMap0: TextureUsage = 14;
pub const TextureUsage_SamplerSpecularMap1: TextureUsage = 15;
pub const TextureUsage_SamplerWaveMap: TextureUsage = 16;
pub const TextureUsage_SamplerWaveletMap0: TextureUsage = 17;
pub const TextureUsage_SamplerWaveletMap1: TextureUsage = 18;
pub const TextureUsage_SamplerWhitecapMap: TextureUsage = 19;
pub const TextureUsage_UnknownDawntrail1: TextureUsage = 20;
pub type TextureUsage = u8;
#[doc = " Implementation of the Blowfish block cipher, specialized for encrypting and decrypting SqexArg - the technique used to encrypt game arguments by the launcher.\n\n # Example\n\n ```\n # use physis::blowfish::Blowfish;\n let key = b\"abcdefgh\";\n let data = b\"foobar  \";\n\n let fish = Blowfish::new(key);\n let encrypted = fish.encrypt(data).unwrap();\n let decrypted = fish.decrypt(&encrypted).unwrap();\n # assert_eq!(data, &decrypted[..])\n ```"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Blowfish {
    _unused: [u8; 0],
}
#[doc = " Represents the boot data for FFXIV, which is located under the \"boot\" directory."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BootData {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CMP {
    _unused: [u8; 0],
}
#[doc = " Represents a config file, which is made up of categories and settings. Categories may have zero to one setting."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConfigFile {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EXD {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EXH {
    _unused: [u8; 0],
}
#[doc = " Framework for operating on game data."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GameData {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDL {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PreBoneDeformer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ShaderPackage {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_Buffer {
    pub size: u32,
    pub data: *mut u8,
}
#[test]
fn bindgen_test_layout_physis_Buffer() {
    const UNINIT: ::std::mem::MaybeUninit<physis_Buffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_Buffer>(),
        16usize,
        concat!("Size of: ", stringify!(physis_Buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_Buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_Buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Buffer),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Buffer),
            "::",
            stringify!(data)
        )
    );
}
#[doc = " The type of repository, discerning game data from expansion data."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RepositoryType {
    pub tag: RepositoryType_Tag,
    pub __bindgen_anon_1: RepositoryType__bindgen_ty_1,
}
#[doc = " The base game directory, like \"ffxiv\"."]
pub const RepositoryType_Tag_Base: RepositoryType_Tag = 0;
#[doc = " An expansion directory, like \"ex1\"."]
pub const RepositoryType_Tag_Expansion: RepositoryType_Tag = 1;
pub type RepositoryType_Tag = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RepositoryType_Expansion_Body {
    #[doc = " The expansion number starting at 1."]
    pub number: i32,
}
#[test]
fn bindgen_test_layout_RepositoryType_Expansion_Body() {
    const UNINIT: ::std::mem::MaybeUninit<RepositoryType_Expansion_Body> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RepositoryType_Expansion_Body>(),
        4usize,
        concat!("Size of: ", stringify!(RepositoryType_Expansion_Body))
    );
    assert_eq!(
        ::std::mem::align_of::<RepositoryType_Expansion_Body>(),
        4usize,
        concat!("Alignment of ", stringify!(RepositoryType_Expansion_Body))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RepositoryType_Expansion_Body),
            "::",
            stringify!(number)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RepositoryType__bindgen_ty_1 {
    pub expansion: RepositoryType_Expansion_Body,
}
#[test]
fn bindgen_test_layout_RepositoryType__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<RepositoryType__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RepositoryType__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(RepositoryType__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RepositoryType__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(RepositoryType__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expansion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RepositoryType__bindgen_ty_1),
            "::",
            stringify!(expansion)
        )
    );
}
#[test]
fn bindgen_test_layout_RepositoryType() {
    const UNINIT: ::std::mem::MaybeUninit<RepositoryType> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RepositoryType>(),
        8usize,
        concat!("Size of: ", stringify!(RepositoryType))
    );
    assert_eq!(
        ::std::mem::align_of::<RepositoryType>(),
        4usize,
        concat!("Alignment of ", stringify!(RepositoryType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RepositoryType),
            "::",
            stringify!(tag)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct physis_Repository {
    pub name: *const ::std::os::raw::c_char,
    pub repository_type: RepositoryType,
    pub version: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_physis_Repository() {
    const UNINIT: ::std::mem::MaybeUninit<physis_Repository> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_Repository>(),
        24usize,
        concat!("Size of: ", stringify!(physis_Repository))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_Repository>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_Repository))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Repository),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repository_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Repository),
            "::",
            stringify!(repository_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Repository),
            "::",
            stringify!(version)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_Repositories {
    pub repositories_count: u32,
    pub repositories: *mut physis_Repository,
}
#[test]
fn bindgen_test_layout_physis_Repositories() {
    const UNINIT: ::std::mem::MaybeUninit<physis_Repositories> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_Repositories>(),
        16usize,
        concat!("Size of: ", stringify!(physis_Repositories))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_Repositories>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_Repositories))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repositories_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Repositories),
            "::",
            stringify!(repositories_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repositories) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Repositories),
            "::",
            stringify!(repositories)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_EXH {
    pub p_ptr: *mut EXH,
    pub page_count: u32,
    pub language_count: u32,
    pub languages: *mut Language,
    pub column_count: u32,
    pub row_count: u32,
}
#[test]
fn bindgen_test_layout_physis_EXH() {
    const UNINIT: ::std::mem::MaybeUninit<physis_EXH> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_EXH>(),
        32usize,
        concat!("Size of: ", stringify!(physis_EXH))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_EXH>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_EXH))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_EXH),
            "::",
            stringify!(p_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_EXH),
            "::",
            stringify!(page_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).language_count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_EXH),
            "::",
            stringify!(language_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).languages) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_EXH),
            "::",
            stringify!(languages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).column_count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_EXH),
            "::",
            stringify!(column_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).row_count) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_EXH),
            "::",
            stringify!(row_count)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct physis_ColumnData {
    pub tag: physis_ColumnData_Tag,
    pub __bindgen_anon_1: physis_ColumnData__bindgen_ty_1,
}
pub const physis_ColumnData_Tag_String: physis_ColumnData_Tag = 0;
pub const physis_ColumnData_Tag_Bool: physis_ColumnData_Tag = 1;
pub const physis_ColumnData_Tag_Int8: physis_ColumnData_Tag = 2;
pub const physis_ColumnData_Tag_UInt8: physis_ColumnData_Tag = 3;
pub const physis_ColumnData_Tag_Int16: physis_ColumnData_Tag = 4;
pub const physis_ColumnData_Tag_UInt16: physis_ColumnData_Tag = 5;
pub const physis_ColumnData_Tag_Int32: physis_ColumnData_Tag = 6;
pub const physis_ColumnData_Tag_UInt32: physis_ColumnData_Tag = 7;
pub const physis_ColumnData_Tag_Float32: physis_ColumnData_Tag = 8;
pub const physis_ColumnData_Tag_Int64: physis_ColumnData_Tag = 9;
pub const physis_ColumnData_Tag_UInt64: physis_ColumnData_Tag = 10;
pub type physis_ColumnData_Tag = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_ColumnData_String_Body {
    pub _0: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_physis_ColumnData_String_Body() {
    const UNINIT: ::std::mem::MaybeUninit<physis_ColumnData_String_Body> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_ColumnData_String_Body>(),
        8usize,
        concat!("Size of: ", stringify!(physis_ColumnData_String_Body))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_ColumnData_String_Body>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_ColumnData_String_Body))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData_String_Body),
            "::",
            stringify!(_0)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_ColumnData_Bool_Body {
    pub _0: bool,
}
#[test]
fn bindgen_test_layout_physis_ColumnData_Bool_Body() {
    const UNINIT: ::std::mem::MaybeUninit<physis_ColumnData_Bool_Body> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_ColumnData_Bool_Body>(),
        1usize,
        concat!("Size of: ", stringify!(physis_ColumnData_Bool_Body))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_ColumnData_Bool_Body>(),
        1usize,
        concat!("Alignment of ", stringify!(physis_ColumnData_Bool_Body))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData_Bool_Body),
            "::",
            stringify!(_0)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_ColumnData_Int8_Body {
    pub _0: i8,
}
#[test]
fn bindgen_test_layout_physis_ColumnData_Int8_Body() {
    const UNINIT: ::std::mem::MaybeUninit<physis_ColumnData_Int8_Body> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_ColumnData_Int8_Body>(),
        1usize,
        concat!("Size of: ", stringify!(physis_ColumnData_Int8_Body))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_ColumnData_Int8_Body>(),
        1usize,
        concat!("Alignment of ", stringify!(physis_ColumnData_Int8_Body))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData_Int8_Body),
            "::",
            stringify!(_0)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_ColumnData_UInt8_Body {
    pub _0: u8,
}
#[test]
fn bindgen_test_layout_physis_ColumnData_UInt8_Body() {
    const UNINIT: ::std::mem::MaybeUninit<physis_ColumnData_UInt8_Body> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_ColumnData_UInt8_Body>(),
        1usize,
        concat!("Size of: ", stringify!(physis_ColumnData_UInt8_Body))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_ColumnData_UInt8_Body>(),
        1usize,
        concat!("Alignment of ", stringify!(physis_ColumnData_UInt8_Body))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData_UInt8_Body),
            "::",
            stringify!(_0)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_ColumnData_Int16_Body {
    pub _0: i16,
}
#[test]
fn bindgen_test_layout_physis_ColumnData_Int16_Body() {
    const UNINIT: ::std::mem::MaybeUninit<physis_ColumnData_Int16_Body> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_ColumnData_Int16_Body>(),
        2usize,
        concat!("Size of: ", stringify!(physis_ColumnData_Int16_Body))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_ColumnData_Int16_Body>(),
        2usize,
        concat!("Alignment of ", stringify!(physis_ColumnData_Int16_Body))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData_Int16_Body),
            "::",
            stringify!(_0)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_ColumnData_UInt16_Body {
    pub _0: u16,
}
#[test]
fn bindgen_test_layout_physis_ColumnData_UInt16_Body() {
    const UNINIT: ::std::mem::MaybeUninit<physis_ColumnData_UInt16_Body> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_ColumnData_UInt16_Body>(),
        2usize,
        concat!("Size of: ", stringify!(physis_ColumnData_UInt16_Body))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_ColumnData_UInt16_Body>(),
        2usize,
        concat!("Alignment of ", stringify!(physis_ColumnData_UInt16_Body))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData_UInt16_Body),
            "::",
            stringify!(_0)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_ColumnData_Int32_Body {
    pub _0: i32,
}
#[test]
fn bindgen_test_layout_physis_ColumnData_Int32_Body() {
    const UNINIT: ::std::mem::MaybeUninit<physis_ColumnData_Int32_Body> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_ColumnData_Int32_Body>(),
        4usize,
        concat!("Size of: ", stringify!(physis_ColumnData_Int32_Body))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_ColumnData_Int32_Body>(),
        4usize,
        concat!("Alignment of ", stringify!(physis_ColumnData_Int32_Body))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData_Int32_Body),
            "::",
            stringify!(_0)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_ColumnData_UInt32_Body {
    pub _0: u32,
}
#[test]
fn bindgen_test_layout_physis_ColumnData_UInt32_Body() {
    const UNINIT: ::std::mem::MaybeUninit<physis_ColumnData_UInt32_Body> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_ColumnData_UInt32_Body>(),
        4usize,
        concat!("Size of: ", stringify!(physis_ColumnData_UInt32_Body))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_ColumnData_UInt32_Body>(),
        4usize,
        concat!("Alignment of ", stringify!(physis_ColumnData_UInt32_Body))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData_UInt32_Body),
            "::",
            stringify!(_0)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_ColumnData_Float32_Body {
    pub _0: f32,
}
#[test]
fn bindgen_test_layout_physis_ColumnData_Float32_Body() {
    const UNINIT: ::std::mem::MaybeUninit<physis_ColumnData_Float32_Body> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_ColumnData_Float32_Body>(),
        4usize,
        concat!("Size of: ", stringify!(physis_ColumnData_Float32_Body))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_ColumnData_Float32_Body>(),
        4usize,
        concat!("Alignment of ", stringify!(physis_ColumnData_Float32_Body))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData_Float32_Body),
            "::",
            stringify!(_0)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_ColumnData_Int64_Body {
    pub _0: i64,
}
#[test]
fn bindgen_test_layout_physis_ColumnData_Int64_Body() {
    const UNINIT: ::std::mem::MaybeUninit<physis_ColumnData_Int64_Body> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_ColumnData_Int64_Body>(),
        8usize,
        concat!("Size of: ", stringify!(physis_ColumnData_Int64_Body))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_ColumnData_Int64_Body>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_ColumnData_Int64_Body))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData_Int64_Body),
            "::",
            stringify!(_0)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_ColumnData_UInt64_Body {
    pub _0: u64,
}
#[test]
fn bindgen_test_layout_physis_ColumnData_UInt64_Body() {
    const UNINIT: ::std::mem::MaybeUninit<physis_ColumnData_UInt64_Body> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_ColumnData_UInt64_Body>(),
        8usize,
        concat!("Size of: ", stringify!(physis_ColumnData_UInt64_Body))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_ColumnData_UInt64_Body>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_ColumnData_UInt64_Body))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData_UInt64_Body),
            "::",
            stringify!(_0)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union physis_ColumnData__bindgen_ty_1 {
    pub string: physis_ColumnData_String_Body,
    pub bool_: physis_ColumnData_Bool_Body,
    pub int8: physis_ColumnData_Int8_Body,
    pub u_int8: physis_ColumnData_UInt8_Body,
    pub int16: physis_ColumnData_Int16_Body,
    pub u_int16: physis_ColumnData_UInt16_Body,
    pub int32: physis_ColumnData_Int32_Body,
    pub u_int32: physis_ColumnData_UInt32_Body,
    pub float32: physis_ColumnData_Float32_Body,
    pub int64: physis_ColumnData_Int64_Body,
    pub u_int64: physis_ColumnData_UInt64_Body,
}
#[test]
fn bindgen_test_layout_physis_ColumnData__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<physis_ColumnData__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_ColumnData__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(physis_ColumnData__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_ColumnData__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_ColumnData__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData__bindgen_ty_1),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bool_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData__bindgen_ty_1),
            "::",
            stringify!(bool_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData__bindgen_ty_1),
            "::",
            stringify!(int8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u_int8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData__bindgen_ty_1),
            "::",
            stringify!(u_int8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData__bindgen_ty_1),
            "::",
            stringify!(int16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u_int16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData__bindgen_ty_1),
            "::",
            stringify!(u_int16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData__bindgen_ty_1),
            "::",
            stringify!(int32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u_int32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData__bindgen_ty_1),
            "::",
            stringify!(u_int32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).float32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData__bindgen_ty_1),
            "::",
            stringify!(float32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData__bindgen_ty_1),
            "::",
            stringify!(int64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u_int64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData__bindgen_ty_1),
            "::",
            stringify!(u_int64)
        )
    );
}
#[test]
fn bindgen_test_layout_physis_ColumnData() {
    const UNINIT: ::std::mem::MaybeUninit<physis_ColumnData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_ColumnData>(),
        16usize,
        concat!("Size of: ", stringify!(physis_ColumnData))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_ColumnData>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_ColumnData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ColumnData),
            "::",
            stringify!(tag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_ExcelRow {
    pub column_data: *mut physis_ColumnData,
}
#[test]
fn bindgen_test_layout_physis_ExcelRow() {
    const UNINIT: ::std::mem::MaybeUninit<physis_ExcelRow> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_ExcelRow>(),
        8usize,
        concat!("Size of: ", stringify!(physis_ExcelRow))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_ExcelRow>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_ExcelRow))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).column_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ExcelRow),
            "::",
            stringify!(column_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_EXD {
    pub p_ptr: *mut EXD,
    pub column_count: ::std::os::raw::c_uint,
    pub row_data: *mut physis_ExcelRow,
    pub row_count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_physis_EXD() {
    const UNINIT: ::std::mem::MaybeUninit<physis_EXD> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_EXD>(),
        32usize,
        concat!("Size of: ", stringify!(physis_EXD))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_EXD>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_EXD))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_EXD),
            "::",
            stringify!(p_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).column_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_EXD),
            "::",
            stringify!(column_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).row_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_EXD),
            "::",
            stringify!(row_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).row_count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_EXD),
            "::",
            stringify!(row_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_SheetNames {
    pub name_count: u32,
    pub names: *mut *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_physis_SheetNames() {
    const UNINIT: ::std::mem::MaybeUninit<physis_SheetNames> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_SheetNames>(),
        16usize,
        concat!("Size of: ", stringify!(physis_SheetNames))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_SheetNames>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_SheetNames))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SheetNames),
            "::",
            stringify!(name_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).names) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SheetNames),
            "::",
            stringify!(names)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vertex {
    pub position: [f32; 3usize],
    pub uv0: [f32; 2usize],
    pub uv1: [f32; 2usize],
    pub normal: [f32; 3usize],
    pub bitangent: [f32; 4usize],
    pub color: [f32; 4usize],
    pub bone_weight: [f32; 4usize],
    pub bone_id: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_Vertex() {
    const UNINIT: ::std::mem::MaybeUninit<Vertex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Vertex>(),
        92usize,
        concat!("Size of: ", stringify!(Vertex))
    );
    assert_eq!(
        ::std::mem::align_of::<Vertex>(),
        4usize,
        concat!("Alignment of ", stringify!(Vertex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Vertex),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uv0) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Vertex),
            "::",
            stringify!(uv0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uv1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Vertex),
            "::",
            stringify!(uv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).normal) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Vertex),
            "::",
            stringify!(normal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitangent) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Vertex),
            "::",
            stringify!(bitangent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Vertex),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bone_weight) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Vertex),
            "::",
            stringify!(bone_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bone_id) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Vertex),
            "::",
            stringify!(bone_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubMesh {
    pub submesh_index: usize,
    pub index_count: u32,
    pub index_offset: u32,
}
#[test]
fn bindgen_test_layout_SubMesh() {
    const UNINIT: ::std::mem::MaybeUninit<SubMesh> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SubMesh>(),
        16usize,
        concat!("Size of: ", stringify!(SubMesh))
    );
    assert_eq!(
        ::std::mem::align_of::<SubMesh>(),
        8usize,
        concat!("Alignment of ", stringify!(SubMesh))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).submesh_index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SubMesh),
            "::",
            stringify!(submesh_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SubMesh),
            "::",
            stringify!(index_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index_offset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SubMesh),
            "::",
            stringify!(index_offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_Part {
    pub num_vertices: u32,
    pub vertices: *const Vertex,
    pub num_indices: u32,
    pub indices: *const u16,
    pub material_index: u16,
    pub num_submeshes: u32,
    pub submeshes: *const SubMesh,
}
#[test]
fn bindgen_test_layout_physis_Part() {
    const UNINIT: ::std::mem::MaybeUninit<physis_Part> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_Part>(),
        48usize,
        concat!("Size of: ", stringify!(physis_Part))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_Part>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_Part))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_vertices) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Part),
            "::",
            stringify!(num_vertices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertices) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Part),
            "::",
            stringify!(vertices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_indices) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Part),
            "::",
            stringify!(num_indices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indices) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Part),
            "::",
            stringify!(indices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).material_index) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Part),
            "::",
            stringify!(material_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_submeshes) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Part),
            "::",
            stringify!(num_submeshes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).submeshes) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Part),
            "::",
            stringify!(submeshes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_LOD {
    pub num_parts: u32,
    pub parts: *const physis_Part,
}
#[test]
fn bindgen_test_layout_physis_LOD() {
    const UNINIT: ::std::mem::MaybeUninit<physis_LOD> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_LOD>(),
        16usize,
        concat!("Size of: ", stringify!(physis_LOD))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_LOD>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_LOD))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_parts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_LOD),
            "::",
            stringify!(num_parts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parts) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_LOD),
            "::",
            stringify!(parts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_MDL {
    pub p_ptr: *mut MDL,
    pub num_lod: u32,
    pub lods: *const physis_LOD,
    pub num_affected_bones: u32,
    pub affected_bone_names: *mut *const ::std::os::raw::c_char,
    pub num_material_names: u32,
    pub material_names: *mut *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_physis_MDL() {
    const UNINIT: ::std::mem::MaybeUninit<physis_MDL> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_MDL>(),
        56usize,
        concat!("Size of: ", stringify!(physis_MDL))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_MDL>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_MDL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_MDL),
            "::",
            stringify!(p_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_lod) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_MDL),
            "::",
            stringify!(num_lod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lods) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_MDL),
            "::",
            stringify!(lods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_affected_bones) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_MDL),
            "::",
            stringify!(num_affected_bones)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).affected_bone_names) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_MDL),
            "::",
            stringify!(affected_bone_names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_material_names) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_MDL),
            "::",
            stringify!(num_material_names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).material_names) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_MDL),
            "::",
            stringify!(material_names)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_SupportedSubraces {
    pub subraces: [Subrace; 2usize],
}
#[test]
fn bindgen_test_layout_physis_SupportedSubraces() {
    const UNINIT: ::std::mem::MaybeUninit<physis_SupportedSubraces> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_SupportedSubraces>(),
        2usize,
        concat!("Size of: ", stringify!(physis_SupportedSubraces))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_SupportedSubraces>(),
        1usize,
        concat!("Alignment of ", stringify!(physis_SupportedSubraces))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subraces) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SupportedSubraces),
            "::",
            stringify!(subraces)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_EXL {
    pub version: i32,
    pub entry_count: i32,
    pub entry_keys: *const *const ::std::os::raw::c_char,
    pub entry_values: *const i32,
}
#[test]
fn bindgen_test_layout_physis_EXL() {
    const UNINIT: ::std::mem::MaybeUninit<physis_EXL> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_EXL>(),
        24usize,
        concat!("Size of: ", stringify!(physis_EXL))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_EXL>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_EXL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_EXL),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry_count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_EXL),
            "::",
            stringify!(entry_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry_keys) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_EXL),
            "::",
            stringify!(entry_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry_values) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_EXL),
            "::",
            stringify!(entry_values)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_Bone {
    pub index: u32,
    pub name: *const ::std::os::raw::c_char,
    pub parent_bone: *mut physis_Bone,
    pub parent_index: u32,
    pub position: [f32; 3usize],
    pub rotation: [f32; 4usize],
    pub scale: [f32; 3usize],
}
#[test]
fn bindgen_test_layout_physis_Bone() {
    const UNINIT: ::std::mem::MaybeUninit<physis_Bone> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_Bone>(),
        72usize,
        concat!("Size of: ", stringify!(physis_Bone))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_Bone>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_Bone))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Bone),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Bone),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_bone) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Bone),
            "::",
            stringify!(parent_bone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Bone),
            "::",
            stringify!(parent_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Bone),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Bone),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Bone),
            "::",
            stringify!(scale)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_Skeleton {
    pub num_bones: u32,
    pub bones: *mut physis_Bone,
    pub root_bone: *mut physis_Bone,
}
#[test]
fn bindgen_test_layout_physis_Skeleton() {
    const UNINIT: ::std::mem::MaybeUninit<physis_Skeleton> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_Skeleton>(),
        24usize,
        concat!("Size of: ", stringify!(physis_Skeleton))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_Skeleton>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_Skeleton))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_bones) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Skeleton),
            "::",
            stringify!(num_bones)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bones) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Skeleton),
            "::",
            stringify!(bones)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_bone) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Skeleton),
            "::",
            stringify!(root_bone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_Texture {
    pub width: u32,
    pub height: u32,
    pub rgba_size: u32,
    pub rgba: *mut u8,
}
#[test]
fn bindgen_test_layout_physis_Texture() {
    const UNINIT: ::std::mem::MaybeUninit<physis_Texture> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_Texture>(),
        24usize,
        concat!("Size of: ", stringify!(physis_Texture))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_Texture>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_Texture))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Texture),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Texture),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rgba_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Texture),
            "::",
            stringify!(rgba_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rgba) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Texture),
            "::",
            stringify!(rgba)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ShaderKey {
    pub category: u32,
    pub value: u32,
}
#[test]
fn bindgen_test_layout_ShaderKey() {
    const UNINIT: ::std::mem::MaybeUninit<ShaderKey> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ShaderKey>(),
        8usize,
        concat!("Size of: ", stringify!(ShaderKey))
    );
    assert_eq!(
        ::std::mem::align_of::<ShaderKey>(),
        4usize,
        concat!("Alignment of ", stringify!(ShaderKey))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).category) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ShaderKey),
            "::",
            stringify!(category)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ShaderKey),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Constant {
    pub id: u32,
    pub num_values: u32,
    pub values: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_Constant() {
    const UNINIT: ::std::mem::MaybeUninit<Constant> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Constant>(),
        24usize,
        concat!("Size of: ", stringify!(Constant))
    );
    assert_eq!(
        ::std::mem::align_of::<Constant>(),
        4usize,
        concat!("Alignment of ", stringify!(Constant))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Constant),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_values) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Constant),
            "::",
            stringify!(num_values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Constant),
            "::",
            stringify!(values)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Sampler {
    pub texture_usage: TextureUsage,
    pub flags: u32,
    pub texture_index: u8,
}
#[test]
fn bindgen_test_layout_Sampler() {
    const UNINIT: ::std::mem::MaybeUninit<Sampler> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Sampler>(),
        12usize,
        concat!("Size of: ", stringify!(Sampler))
    );
    assert_eq!(
        ::std::mem::align_of::<Sampler>(),
        4usize,
        concat!("Alignment of ", stringify!(Sampler))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).texture_usage) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sampler),
            "::",
            stringify!(texture_usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Sampler),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).texture_index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Sampler),
            "::",
            stringify!(texture_index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_Material {
    pub shpk_name: *const ::std::os::raw::c_char,
    pub num_textures: u32,
    pub textures: *mut *const ::std::os::raw::c_char,
    pub num_shader_keys: u32,
    pub shader_keys: *mut ShaderKey,
    pub num_constants: u32,
    pub constants: *mut Constant,
    pub num_samplers: u32,
    pub samplers: *mut Sampler,
}
#[test]
fn bindgen_test_layout_physis_Material() {
    const UNINIT: ::std::mem::MaybeUninit<physis_Material> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_Material>(),
        72usize,
        concat!("Size of: ", stringify!(physis_Material))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_Material>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_Material))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shpk_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Material),
            "::",
            stringify!(shpk_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_textures) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Material),
            "::",
            stringify!(num_textures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textures) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Material),
            "::",
            stringify!(textures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_shader_keys) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Material),
            "::",
            stringify!(num_shader_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shader_keys) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Material),
            "::",
            stringify!(shader_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_constants) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Material),
            "::",
            stringify!(num_constants)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constants) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Material),
            "::",
            stringify!(constants)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_samplers) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Material),
            "::",
            stringify!(num_samplers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplers) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Material),
            "::",
            stringify!(samplers)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_ShaderParameter {
    pub slot: u16,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_physis_ShaderParameter() {
    const UNINIT: ::std::mem::MaybeUninit<physis_ShaderParameter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_ShaderParameter>(),
        16usize,
        concat!("Size of: ", stringify!(physis_ShaderParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_ShaderParameter>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_ShaderParameter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ShaderParameter),
            "::",
            stringify!(slot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ShaderParameter),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_Shader {
    pub len: i32,
    pub bytecode: *mut u8,
    pub num_scalar_parameters: i32,
    pub scalar_parameters: *mut physis_ShaderParameter,
    pub num_resource_parameters: i32,
    pub resource_parameters: *mut physis_ShaderParameter,
}
#[test]
fn bindgen_test_layout_physis_Shader() {
    const UNINIT: ::std::mem::MaybeUninit<physis_Shader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_Shader>(),
        48usize,
        concat!("Size of: ", stringify!(physis_Shader))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_Shader>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_Shader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Shader),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytecode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Shader),
            "::",
            stringify!(bytecode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_scalar_parameters) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Shader),
            "::",
            stringify!(num_scalar_parameters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scalar_parameters) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Shader),
            "::",
            stringify!(scalar_parameters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_resource_parameters) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Shader),
            "::",
            stringify!(num_resource_parameters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resource_parameters) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Shader),
            "::",
            stringify!(resource_parameters)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Key {
    pub id: u32,
    pub default_value: u32,
}
#[test]
fn bindgen_test_layout_Key() {
    const UNINIT: ::std::mem::MaybeUninit<Key> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Key>(),
        8usize,
        concat!("Size of: ", stringify!(Key))
    );
    assert_eq!(
        ::std::mem::align_of::<Key>(),
        4usize,
        concat!("Alignment of ", stringify!(Key))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Key), "::", stringify!(id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Key),
            "::",
            stringify!(default_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MaterialParameter {
    pub id: u32,
    pub byte_offset: u16,
    pub byte_size: u16,
}
#[test]
fn bindgen_test_layout_MaterialParameter() {
    const UNINIT: ::std::mem::MaybeUninit<MaterialParameter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MaterialParameter>(),
        8usize,
        concat!("Size of: ", stringify!(MaterialParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<MaterialParameter>(),
        4usize,
        concat!("Alignment of ", stringify!(MaterialParameter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MaterialParameter),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MaterialParameter),
            "::",
            stringify!(byte_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte_size) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(MaterialParameter),
            "::",
            stringify!(byte_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_SHPK {
    pub p_ptr: *mut ShaderPackage,
    pub num_vertex_shaders: i32,
    pub vertex_shaders: *mut physis_Shader,
    pub num_pixel_shaders: i32,
    pub pixel_shaders: *mut physis_Shader,
    pub num_material_keys: i32,
    pub material_keys: *mut Key,
    pub sub_view_key1_default: u32,
    pub sub_view_key2_default: u32,
    pub material_parameters_size: u32,
    pub num_material_parameters: u32,
    pub material_parameters: *mut MaterialParameter,
}
#[test]
fn bindgen_test_layout_physis_SHPK() {
    const UNINIT: ::std::mem::MaybeUninit<physis_SHPK> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_SHPK>(),
        80usize,
        concat!("Size of: ", stringify!(physis_SHPK))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_SHPK>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_SHPK))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPK),
            "::",
            stringify!(p_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_vertex_shaders) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPK),
            "::",
            stringify!(num_vertex_shaders)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertex_shaders) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPK),
            "::",
            stringify!(vertex_shaders)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_pixel_shaders) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPK),
            "::",
            stringify!(num_pixel_shaders)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixel_shaders) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPK),
            "::",
            stringify!(pixel_shaders)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_material_keys) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPK),
            "::",
            stringify!(num_material_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).material_keys) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPK),
            "::",
            stringify!(material_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sub_view_key1_default) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPK),
            "::",
            stringify!(sub_view_key1_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sub_view_key2_default) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPK),
            "::",
            stringify!(sub_view_key2_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).material_parameters_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPK),
            "::",
            stringify!(material_parameters_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_material_parameters) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPK),
            "::",
            stringify!(num_material_parameters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).material_parameters) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPK),
            "::",
            stringify!(material_parameters)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Pass {
    pub id: u32,
    pub vertex_shader: u32,
    pub pixel_shader: u32,
}
#[test]
fn bindgen_test_layout_Pass() {
    const UNINIT: ::std::mem::MaybeUninit<Pass> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Pass>(),
        12usize,
        concat!("Size of: ", stringify!(Pass))
    );
    assert_eq!(
        ::std::mem::align_of::<Pass>(),
        4usize,
        concat!("Alignment of ", stringify!(Pass))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Pass), "::", stringify!(id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertex_shader) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Pass),
            "::",
            stringify!(vertex_shader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixel_shader) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Pass),
            "::",
            stringify!(pixel_shader)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_SHPKNode {
    pub selector: u32,
    pub pass_count: u32,
    pub pass_indices: [u8; 16usize],
    pub system_key_count: u32,
    pub system_keys: *mut u32,
    pub scene_key_count: u32,
    pub scene_keys: *mut u32,
    pub material_key_count: u32,
    pub material_keys: *mut u32,
    pub subview_key_count: u32,
    pub subview_keys: *mut u32,
    pub passes: *mut Pass,
}
#[test]
fn bindgen_test_layout_physis_SHPKNode() {
    const UNINIT: ::std::mem::MaybeUninit<physis_SHPKNode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_SHPKNode>(),
        96usize,
        concat!("Size of: ", stringify!(physis_SHPKNode))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_SHPKNode>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_SHPKNode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).selector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPKNode),
            "::",
            stringify!(selector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pass_count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPKNode),
            "::",
            stringify!(pass_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pass_indices) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPKNode),
            "::",
            stringify!(pass_indices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_key_count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPKNode),
            "::",
            stringify!(system_key_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_keys) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPKNode),
            "::",
            stringify!(system_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scene_key_count) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPKNode),
            "::",
            stringify!(scene_key_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scene_keys) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPKNode),
            "::",
            stringify!(scene_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).material_key_count) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPKNode),
            "::",
            stringify!(material_key_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).material_keys) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPKNode),
            "::",
            stringify!(material_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subview_key_count) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPKNode),
            "::",
            stringify!(subview_key_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subview_keys) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPKNode),
            "::",
            stringify!(subview_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).passes) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_SHPKNode),
            "::",
            stringify!(passes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_CMP {
    pub p_ptr: *mut CMP,
}
#[test]
fn bindgen_test_layout_physis_CMP() {
    const UNINIT: ::std::mem::MaybeUninit<physis_CMP> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_CMP>(),
        8usize,
        concat!("Size of: ", stringify!(physis_CMP))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_CMP>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_CMP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_CMP),
            "::",
            stringify!(p_ptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RacialScalingParameters {
    #[doc = " Male minimum height"]
    pub male_min_size: f32,
    #[doc = " Male maximum height"]
    pub male_max_size: f32,
    #[doc = " Male minimum tail size"]
    pub male_min_tail: f32,
    #[doc = " Male maximum tail size"]
    pub male_max_tail: f32,
    #[doc = " Female minimum height"]
    pub female_min_size: f32,
    #[doc = " Female maximum height"]
    pub female_max_size: f32,
    #[doc = " Female minimum tail size"]
    pub female_min_tail: f32,
    #[doc = " Female maximum tail size"]
    pub female_max_tail: f32,
    #[doc = " Minimum bust size on the X-axis"]
    pub bust_min_x: f32,
    #[doc = " Minimum bust size on the Y-axis"]
    pub bust_min_y: f32,
    #[doc = " Minimum bust size on the Z-axis"]
    pub bust_min_z: f32,
    #[doc = " Maximum bust size on the X-axis"]
    pub bust_max_x: f32,
    #[doc = " Maximum bust size on the Y-axis"]
    pub bust_max_y: f32,
    #[doc = " Maximum bust size on the Z-axis"]
    pub bust_max_z: f32,
}
#[test]
fn bindgen_test_layout_RacialScalingParameters() {
    const UNINIT: ::std::mem::MaybeUninit<RacialScalingParameters> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RacialScalingParameters>(),
        56usize,
        concat!("Size of: ", stringify!(RacialScalingParameters))
    );
    assert_eq!(
        ::std::mem::align_of::<RacialScalingParameters>(),
        4usize,
        concat!("Alignment of ", stringify!(RacialScalingParameters))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).male_min_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RacialScalingParameters),
            "::",
            stringify!(male_min_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).male_max_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RacialScalingParameters),
            "::",
            stringify!(male_max_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).male_min_tail) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RacialScalingParameters),
            "::",
            stringify!(male_min_tail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).male_max_tail) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RacialScalingParameters),
            "::",
            stringify!(male_max_tail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).female_min_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RacialScalingParameters),
            "::",
            stringify!(female_min_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).female_max_size) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RacialScalingParameters),
            "::",
            stringify!(female_max_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).female_min_tail) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RacialScalingParameters),
            "::",
            stringify!(female_min_tail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).female_max_tail) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RacialScalingParameters),
            "::",
            stringify!(female_max_tail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bust_min_x) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RacialScalingParameters),
            "::",
            stringify!(bust_min_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bust_min_y) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RacialScalingParameters),
            "::",
            stringify!(bust_min_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bust_min_z) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RacialScalingParameters),
            "::",
            stringify!(bust_min_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bust_max_x) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(RacialScalingParameters),
            "::",
            stringify!(bust_max_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bust_max_y) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RacialScalingParameters),
            "::",
            stringify!(bust_max_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bust_max_z) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(RacialScalingParameters),
            "::",
            stringify!(bust_max_z)
        )
    );
}
#[doc = " Represents the several options that make up a character data file (DAT) which is used by the game's character creation system to save and load presets."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CharacterData {
    #[doc = " The version of the character data, the only supported version right now is 4."]
    pub version: u32,
    #[doc = " The checksum of the data fields."]
    pub checksum: u32,
    #[doc = " The race of the character."]
    pub race: Race,
    #[doc = " The gender of the character."]
    pub gender: Gender,
    #[doc = " The age of the character. Normal = 1, Old = 3, Young = 4."]
    pub age: u8,
    #[doc = " The height of the character."]
    pub height: u8,
    #[doc = " The character's subrace."]
    pub subrace: Subrace,
    #[doc = " The character's selected head."]
    pub head: u8,
    #[doc = " The character's selected hair."]
    pub hair: u8,
    #[doc = " If hair highlights are enabled for this character."]
    pub enable_highlights: bool,
    #[doc = " The character's skin tone."]
    pub skin_tone: u8,
    #[doc = " The character's right eye color."]
    pub right_eye_color: u8,
    #[doc = " The character's hair color."]
    pub hair_tone: u8,
    #[doc = " The color of the hair highlights."]
    pub highlights: u8,
    #[doc = " The selected facial features."]
    pub facial_features: u8,
    #[doc = " If the character has limbal eyes."]
    pub limbal_eyes: u8,
    #[doc = " The character's selected eyebrows."]
    pub eyebrows: u8,
    #[doc = " The character's left eye color."]
    pub left_eye_color: u8,
    #[doc = " The character's selected eyes."]
    pub eyes: u8,
    #[doc = " The character's selected nose."]
    pub nose: u8,
    #[doc = " The character's selected jaw."]
    pub jaw: u8,
    #[doc = " The character's selected mouth."]
    pub mouth: u8,
    #[doc = " The character's selected pattern."]
    pub lips_tone_fur_pattern: u8,
    #[doc = " The character's selected tail."]
    pub tail: u8,
    #[doc = " The character's choice of face paint."]
    pub face_paint: u8,
    #[doc = " The size of the character's bust."]
    pub bust: u8,
    #[doc = " The color of the face paint."]
    pub face_paint_color: u8,
    #[doc = " The character's chosen voice."]
    pub voice: u8,
    #[doc = " The timestamp when the preset was created."]
    pub timestamp: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_CharacterData() {
    const UNINIT: ::std::mem::MaybeUninit<CharacterData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CharacterData>(),
        40usize,
        concat!("Size of: ", stringify!(CharacterData))
    );
    assert_eq!(
        ::std::mem::align_of::<CharacterData>(),
        4usize,
        concat!("Alignment of ", stringify!(CharacterData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(checksum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).race) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(race)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gender) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(gender)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).age) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(age)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subrace) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(subrace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hair) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(hair)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_highlights) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(enable_highlights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skin_tone) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(skin_tone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right_eye_color) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(right_eye_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hair_tone) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(hair_tone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).highlights) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(highlights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).facial_features) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(facial_features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limbal_eyes) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(limbal_eyes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eyebrows) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(eyebrows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left_eye_color) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(left_eye_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eyes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(eyes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nose) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(nose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jaw) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(jaw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mouth) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(mouth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lips_tone_fur_pattern) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(lips_tone_fur_pattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tail) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face_paint) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(face_paint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bust) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(bust)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face_paint_color) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(face_paint_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).voice) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(voice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(CharacterData),
            "::",
            stringify!(timestamp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_ConfigFile {
    pub p_ptr: *mut ConfigFile,
}
#[test]
fn bindgen_test_layout_physis_ConfigFile() {
    const UNINIT: ::std::mem::MaybeUninit<physis_ConfigFile> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_ConfigFile>(),
        8usize,
        concat!("Size of: ", stringify!(physis_ConfigFile))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_ConfigFile>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_ConfigFile))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_ConfigFile),
            "::",
            stringify!(p_ptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_PBD {
    pub p_ptr: *mut PreBoneDeformer,
}
#[test]
fn bindgen_test_layout_physis_PBD() {
    const UNINIT: ::std::mem::MaybeUninit<physis_PBD> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_PBD>(),
        8usize,
        concat!("Size of: ", stringify!(physis_PBD))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_PBD>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_PBD))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_PBD),
            "::",
            stringify!(p_ptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_PreBoneDeformBone {
    pub name: *const ::std::os::raw::c_char,
    pub deform: [f32; 12usize],
}
#[test]
fn bindgen_test_layout_physis_PreBoneDeformBone() {
    const UNINIT: ::std::mem::MaybeUninit<physis_PreBoneDeformBone> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_PreBoneDeformBone>(),
        56usize,
        concat!("Size of: ", stringify!(physis_PreBoneDeformBone))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_PreBoneDeformBone>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_PreBoneDeformBone))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_PreBoneDeformBone),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deform) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_PreBoneDeformBone),
            "::",
            stringify!(deform)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_PreBoneDeformMatrices {
    pub num_bones: i32,
    pub bones: *mut physis_PreBoneDeformBone,
}
#[test]
fn bindgen_test_layout_physis_PreBoneDeformMatrices() {
    const UNINIT: ::std::mem::MaybeUninit<physis_PreBoneDeformMatrices> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_PreBoneDeformMatrices>(),
        16usize,
        concat!("Size of: ", stringify!(physis_PreBoneDeformMatrices))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_PreBoneDeformMatrices>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_PreBoneDeformMatrices))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_bones) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_PreBoneDeformMatrices),
            "::",
            stringify!(num_bones)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bones) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_PreBoneDeformMatrices),
            "::",
            stringify!(bones)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_PlateModel {
    pub position: [f32; 2usize],
    pub filename: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_physis_PlateModel() {
    const UNINIT: ::std::mem::MaybeUninit<physis_PlateModel> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_PlateModel>(),
        16usize,
        concat!("Size of: ", stringify!(physis_PlateModel))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_PlateModel>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_PlateModel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_PlateModel),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_PlateModel),
            "::",
            stringify!(filename)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_Terrain {
    pub num_plates: i32,
    pub plates: *mut physis_PlateModel,
}
#[test]
fn bindgen_test_layout_physis_Terrain() {
    const UNINIT: ::std::mem::MaybeUninit<physis_Terrain> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_Terrain>(),
        16usize,
        concat!("Size of: ", stringify!(physis_Terrain))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_Terrain>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_Terrain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_plates) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Terrain),
            "::",
            stringify!(num_plates)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plates) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Terrain),
            "::",
            stringify!(plates)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_Dictionary {
    pub num_words: i32,
    pub words: *const *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_physis_Dictionary() {
    const UNINIT: ::std::mem::MaybeUninit<physis_Dictionary> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_Dictionary>(),
        16usize,
        concat!("Size of: ", stringify!(physis_Dictionary))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_Dictionary>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_Dictionary))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_words) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Dictionary),
            "::",
            stringify!(num_words)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).words) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_Dictionary),
            "::",
            stringify!(words)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physis_IndexEntries {
    pub num_entries: u32,
    pub dir_entries: *const u32,
    pub filename_entries: *const u32,
}
#[test]
fn bindgen_test_layout_physis_IndexEntries() {
    const UNINIT: ::std::mem::MaybeUninit<physis_IndexEntries> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<physis_IndexEntries>(),
        24usize,
        concat!("Size of: ", stringify!(physis_IndexEntries))
    );
    assert_eq!(
        ::std::mem::align_of::<physis_IndexEntries>(),
        8usize,
        concat!("Alignment of ", stringify!(physis_IndexEntries))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_entries) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_IndexEntries),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir_entries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_IndexEntries),
            "::",
            stringify!(dir_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename_entries) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(physis_IndexEntries),
            "::",
            stringify!(filename_entries)
        )
    );
}
extern "C" {
    pub fn physis_get_physis_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn physis_get_libphysis_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn physis_read_file(path: *const ::std::os::raw::c_char) -> physis_Buffer;
}
extern "C" {
    #[doc = " Checks if the file at `path` exists."]
    pub fn physis_gamedata_exists(
        game_data: *mut GameData,
        path: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn physis_gamedata_free_repositories(repositories: physis_Repositories);
}
extern "C" {
    #[doc = " Extracts the raw game file from `path`, and puts it in `data` with `size` length. If the path was not found,\n `size` is 0 and `data` is NULL."]
    pub fn physis_gamedata_extract_file(
        game_data: *mut GameData,
        path: *const ::std::os::raw::c_char,
    ) -> physis_Buffer;
}
extern "C" {
    pub fn physis_gamedata_free_sheet_header(arg1: *mut physis_EXH);
}
extern "C" {
    #[doc = " Initializes a new GameData structure. Path must be a valid game path, or else it will return NULL."]
    pub fn physis_gamedata_initialize(path: *const ::std::os::raw::c_char) -> *mut GameData;
}
extern "C" {
    pub fn physis_gamedata_free(game_data: *mut GameData);
}
extern "C" {
    pub fn physis_gamedata_get_repositories(game_data: *const GameData) -> physis_Repositories;
}
extern "C" {
    pub fn physis_gamedata_read_excel_sheet(
        game_data: *mut GameData,
        name: *const ::std::os::raw::c_char,
        exh: *const physis_EXH,
        language: Language,
        page: ::std::os::raw::c_uint,
    ) -> physis_EXD;
}
extern "C" {
    pub fn physis_gamedata_get_exd_filename(
        name: *const ::std::os::raw::c_char,
        exh: *const physis_EXH,
        language: Language,
        page: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn physis_gamedata_free_sheet(exd: physis_EXD);
}
extern "C" {
    pub fn physis_gamedata_apply_patch(
        gamedata: *const GameData,
        path: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn physis_gamedata_get_all_sheet_names(game_data: *mut GameData) -> physis_SheetNames;
}
extern "C" {
    pub fn physis_bootdata_get_version(boot_data: *const BootData)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Initializes a new BootData structure. Path must be a valid boot path, or else it will return NULL."]
    pub fn physis_bootdata_initialize(path: *const ::std::os::raw::c_char) -> *mut BootData;
}
extern "C" {
    pub fn physis_bootdata_free(boot_data: *mut BootData);
}
extern "C" {
    pub fn physis_bootdata_apply_patch(
        bootdata: *const BootData,
        path: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn physis_mdl_parse(buffer: physis_Buffer) -> physis_MDL;
}
extern "C" {
    pub fn physis_mdl_write(mdl: *const physis_MDL) -> physis_Buffer;
}
extern "C" {
    pub fn physis_mdl_replace_vertices(
        mdl: *mut physis_MDL,
        lod_index: u32,
        part_index: u32,
        num_vertices: u32,
        vertices_ptr: *const Vertex,
        num_indices: u32,
        indices_ptr: *const u16,
        num_submeshes: u32,
        submeshes_ptr: *const SubMesh,
    );
}
extern "C" {
    pub fn physis_get_race_code(race: Race, subrace: Subrace, gender: Gender) -> i32;
}
extern "C" {
    pub fn physis_get_supported_subraces(race: Race) -> physis_SupportedSubraces;
}
extern "C" {
    pub fn physis_gamedata_read_excel_list(buffer: physis_Buffer) -> physis_EXL;
}
extern "C" {
    pub fn physis_slot_from_id(slot_id: i32) -> Slot;
}
extern "C" {
    pub fn physis_get_slot_name(slot: Slot) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn physis_build_equipment_path(
        model_id: i32,
        race: Race,
        subrace: Subrace,
        gender: Gender,
        slot: Slot,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn physis_build_character_path(
        category: CharacterCategory,
        body_ver: i32,
        race: Race,
        subrace: Subrace,
        gender: Gender,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn physis_build_skin_material_path(
        race_code: i32,
        body_code: i32,
        material_name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn physis_build_gear_material_path(
        gear_id: i32,
        gear_version: i32,
        material_name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn physis_build_face_material_path(
        race_code: i32,
        face_code: i32,
        material_name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn physis_build_hair_material_path(
        race_code: i32,
        hair_code: i32,
        material_name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn physis_build_ear_material_path(
        race_code: i32,
        ear_code: i32,
        material_name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn physis_build_tail_material_path(
        race_code: i32,
        tail_code: i32,
        material_name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn physis_blowfish_initialize(
        key: *mut u8,
        key_size: ::std::os::raw::c_uint,
    ) -> *mut Blowfish;
}
extern "C" {
    pub fn physis_blowfish_free(blowfish: *mut Blowfish);
}
extern "C" {
    pub fn physis_blowfish_encrypt(
        blowfish: *const Blowfish,
        in_data: *mut u8,
        in_data_size: ::std::os::raw::c_uint,
        out_data: *mut *mut u8,
        out_data_size: *mut u32,
    ) -> bool;
}
extern "C" {
    pub fn physis_blowfish_decrypt(
        blowfish: *const Blowfish,
        in_data: *mut u8,
        in_data_size: ::std::os::raw::c_uint,
        out_data: *mut *mut u8,
        out_data_size: *mut u32,
    ) -> bool;
}
extern "C" {
    pub fn physis_install_game(
        installer_path: *const ::std::os::raw::c_char,
        game_directory: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn physis_parse_excel_sheet_header(buffer: physis_Buffer) -> *mut physis_EXH;
}
extern "C" {
    pub fn physis_parse_skeleton(buffer: physis_Buffer) -> physis_Skeleton;
}
extern "C" {
    pub fn physis_texture_parse(buffer: physis_Buffer) -> physis_Texture;
}
extern "C" {
    pub fn physis_material_parse(buffer: physis_Buffer) -> physis_Material;
}
extern "C" {
    pub fn physis_parse_shpk(buffer: physis_Buffer) -> physis_SHPK;
}
extern "C" {
    pub fn physis_shpk_get_node(shpk: *const physis_SHPK, key: u32) -> physis_SHPKNode;
}
extern "C" {
    pub fn physis_shpk_build_selector_from_all_keys(
        system_keys: *const u32,
        system_key_count: u32,
        scene_keys: *const u32,
        scene_key_count: u32,
        material_keys: *const u32,
        material_key_count: u32,
        subview_keys: *const u32,
        subview_key_count: u32,
    ) -> u32;
}
extern "C" {
    pub fn physis_shpk_crc(name: *const ::std::os::raw::c_char) -> u32;
}
extern "C" {
    pub fn physis_cmp_parse(buffer: physis_Buffer) -> physis_CMP;
}
extern "C" {
    pub fn physis_cmp_get_racial_scaling_parameters(
        cmp: physis_CMP,
        arg1: Race,
        subrace: Subrace,
    ) -> RacialScalingParameters;
}
extern "C" {
    pub fn physis_chardat_parse(buffer: physis_Buffer) -> CharacterData;
}
extern "C" {
    pub fn physis_cfg_parse(buffer: physis_Buffer) -> physis_ConfigFile;
}
extern "C" {
    pub fn physis_cfg_set_value(
        cfg: physis_ConfigFile,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn physis_cfg_write(cfg: physis_ConfigFile) -> physis_Buffer;
}
extern "C" {
    pub fn physis_parse_pbd(buffer: physis_Buffer) -> physis_PBD;
}
extern "C" {
    pub fn physis_pbd_get_deform_matrix(
        pbd: physis_PBD,
        from_body_id: u16,
        to_body_id: u16,
    ) -> physis_PreBoneDeformMatrices;
}
extern "C" {
    pub fn physis_parse_tera(buffer: physis_Buffer) -> physis_Terrain;
}
extern "C" {
    pub fn physis_parse_dictionary(buffer: physis_Buffer) -> physis_Dictionary;
}
extern "C" {
    pub fn physis_index_parse(path: *const ::std::os::raw::c_char) -> physis_IndexEntries;
}
extern "C" {
    pub fn physis_generate_partial_hash(name: *const ::std::os::raw::c_char) -> u32;
}
extern "C" {
    pub fn physis_calculate_hash(path: *const ::std::os::raw::c_char) -> u64;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
