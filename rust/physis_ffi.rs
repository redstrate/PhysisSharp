/* automatically generated by csbindgen */

#[allow(unused)]
use ::std::os::raw::*;

use super::physis::*;


#[no_mangle]
pub unsafe extern "C" fn csbindgen_atof(
    __nptr: *const c_char
) -> f64
{
    atof(
        __nptr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atoi(
    __nptr: *const c_char
) -> c_int
{
    atoi(
        __nptr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atol(
    __nptr: *const c_char
) -> c_long
{
    atol(
        __nptr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atoll(
    __nptr: *const c_char
) -> c_longlong
{
    atoll(
        __nptr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtod(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char
) -> f64
{
    strtod(
        __nptr,
        __endptr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtof(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char
) -> f32
{
    strtof(
        __nptr,
        __endptr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtold(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char
) -> u128
{
    strtold(
        __nptr,
        __endptr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtof32(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char
) -> _Float32
{
    strtof32(
        __nptr,
        __endptr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtof64(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char
) -> _Float64
{
    strtof64(
        __nptr,
        __endptr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtof32x(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char
) -> _Float32x
{
    strtof32x(
        __nptr,
        __endptr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtof64x(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char
) -> _Float64x
{
    strtof64x(
        __nptr,
        __endptr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtol(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __base: c_int
) -> c_long
{
    strtol(
        __nptr,
        __endptr,
        __base
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtoul(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __base: c_int
) -> c_ulong
{
    strtoul(
        __nptr,
        __endptr,
        __base
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtoq(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __base: c_int
) -> c_longlong
{
    strtoq(
        __nptr,
        __endptr,
        __base
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtouq(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __base: c_int
) -> c_ulonglong
{
    strtouq(
        __nptr,
        __endptr,
        __base
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtoll(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __base: c_int
) -> c_longlong
{
    strtoll(
        __nptr,
        __endptr,
        __base
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtoull(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __base: c_int
) -> c_ulonglong
{
    strtoull(
        __nptr,
        __endptr,
        __base
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtol1(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __base: c_int
) -> c_long
{
    strtol1(
        __nptr,
        __endptr,
        __base
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtoul1(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __base: c_int
) -> c_ulong
{
    strtoul1(
        __nptr,
        __endptr,
        __base
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtoq1(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __base: c_int
) -> c_longlong
{
    strtoq1(
        __nptr,
        __endptr,
        __base
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtouq1(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __base: c_int
) -> c_ulonglong
{
    strtouq1(
        __nptr,
        __endptr,
        __base
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strfromd(
    __dest: *mut c_char,
    __size: usize,
    __format: *const c_char,
    __f: f64
) -> c_int
{
    strfromd(
        __dest,
        __size,
        __format,
        __f
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strfromf(
    __dest: *mut c_char,
    __size: usize,
    __format: *const c_char,
    __f: f32
) -> c_int
{
    strfromf(
        __dest,
        __size,
        __format,
        __f
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strfroml(
    __dest: *mut c_char,
    __size: usize,
    __format: *const c_char,
    __f: u128
) -> c_int
{
    strfroml(
        __dest,
        __size,
        __format,
        __f
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strfromf32(
    __dest: *mut c_char,
    __size: usize,
    __format: *const c_char,
    __f: _Float32
) -> c_int
{
    strfromf32(
        __dest,
        __size,
        __format,
        __f
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strfromf64(
    __dest: *mut c_char,
    __size: usize,
    __format: *const c_char,
    __f: _Float64
) -> c_int
{
    strfromf64(
        __dest,
        __size,
        __format,
        __f
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strfromf32x(
    __dest: *mut c_char,
    __size: usize,
    __format: *const c_char,
    __f: _Float32x
) -> c_int
{
    strfromf32x(
        __dest,
        __size,
        __format,
        __f
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strfromf64x(
    __dest: *mut c_char,
    __size: usize,
    __format: *const c_char,
    __f: _Float64x
) -> c_int
{
    strfromf64x(
        __dest,
        __size,
        __format,
        __f
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtol_l(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __base: c_int,
    __loc: locale_t
) -> c_long
{
    strtol_l(
        __nptr,
        __endptr,
        __base,
        __loc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtoul_l(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __base: c_int,
    __loc: locale_t
) -> c_ulong
{
    strtoul_l(
        __nptr,
        __endptr,
        __base,
        __loc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtoll_l(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __base: c_int,
    __loc: locale_t
) -> c_longlong
{
    strtoll_l(
        __nptr,
        __endptr,
        __base,
        __loc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtoull_l(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __base: c_int,
    __loc: locale_t
) -> c_ulonglong
{
    strtoull_l(
        __nptr,
        __endptr,
        __base,
        __loc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtol_l1(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __base: c_int,
    __loc: locale_t
) -> c_long
{
    strtol_l1(
        __nptr,
        __endptr,
        __base,
        __loc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtoul_l1(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __base: c_int,
    __loc: locale_t
) -> c_ulong
{
    strtoul_l1(
        __nptr,
        __endptr,
        __base,
        __loc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtoll_l1(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __base: c_int,
    __loc: locale_t
) -> c_longlong
{
    strtoll_l1(
        __nptr,
        __endptr,
        __base,
        __loc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtoull_l1(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __base: c_int,
    __loc: locale_t
) -> c_ulonglong
{
    strtoull_l1(
        __nptr,
        __endptr,
        __base,
        __loc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtod_l(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __loc: locale_t
) -> f64
{
    strtod_l(
        __nptr,
        __endptr,
        __loc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtof_l(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __loc: locale_t
) -> f32
{
    strtof_l(
        __nptr,
        __endptr,
        __loc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtold_l(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __loc: locale_t
) -> u128
{
    strtold_l(
        __nptr,
        __endptr,
        __loc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtof32_l(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __loc: locale_t
) -> _Float32
{
    strtof32_l(
        __nptr,
        __endptr,
        __loc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtof64_l(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __loc: locale_t
) -> _Float64
{
    strtof64_l(
        __nptr,
        __endptr,
        __loc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtof32x_l(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __loc: locale_t
) -> _Float32x
{
    strtof32x_l(
        __nptr,
        __endptr,
        __loc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtof64x_l(
    __nptr: *const c_char,
    __endptr: *mut *mut c_char,
    __loc: locale_t
) -> _Float64x
{
    strtof64x_l(
        __nptr,
        __endptr,
        __loc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_l64a(
    __n: c_long
) -> *mut c_char
{
    l64a(
        __n
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_a64l(
    __s: *const c_char
) -> c_long
{
    a64l(
        __s
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_select(
    __nfds: c_int,
    __readfds: *mut fd_set,
    __writefds: *mut fd_set,
    __exceptfds: *mut fd_set,
    __timeout: *mut timeval
) -> c_int
{
    select(
        __nfds,
        __readfds,
        __writefds,
        __exceptfds,
        __timeout
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_pselect(
    __nfds: c_int,
    __readfds: *mut fd_set,
    __writefds: *mut fd_set,
    __exceptfds: *mut fd_set,
    __timeout: *const timespec,
    __sigmask: *const __sigset_t
) -> c_int
{
    pselect(
        __nfds,
        __readfds,
        __writefds,
        __exceptfds,
        __timeout,
        __sigmask
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_random(

) -> c_long
{
    random(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srandom(
    __seed: c_uint
)
{
    srandom(
        __seed
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_initstate(
    __seed: c_uint,
    __statebuf: *mut c_char,
    __statelen: usize
) -> *mut c_char
{
    initstate(
        __seed,
        __statebuf,
        __statelen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_setstate(
    __statebuf: *mut c_char
) -> *mut c_char
{
    setstate(
        __statebuf
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_random_r(
    __buf: *mut random_data,
    __result: *mut i32
) -> c_int
{
    random_r(
        __buf,
        __result
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srandom_r(
    __seed: c_uint,
    __buf: *mut random_data
) -> c_int
{
    srandom_r(
        __seed,
        __buf
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_initstate_r(
    __seed: c_uint,
    __statebuf: *mut c_char,
    __statelen: usize,
    __buf: *mut random_data
) -> c_int
{
    initstate_r(
        __seed,
        __statebuf,
        __statelen,
        __buf
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_setstate_r(
    __statebuf: *mut c_char,
    __buf: *mut random_data
) -> c_int
{
    setstate_r(
        __statebuf,
        __buf
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_rand(

) -> c_int
{
    rand(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srand(
    __seed: c_uint
)
{
    srand(
        __seed
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_rand_r(
    __seed: *mut c_uint
) -> c_int
{
    rand_r(
        __seed
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_drand48(

) -> f64
{
    drand48(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_erand48(
    __xsubi: *mut c_ushort
) -> f64
{
    erand48(
        __xsubi
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_lrand48(

) -> c_long
{
    lrand48(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_nrand48(
    __xsubi: *mut c_ushort
) -> c_long
{
    nrand48(
        __xsubi
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mrand48(

) -> c_long
{
    mrand48(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_jrand48(
    __xsubi: *mut c_ushort
) -> c_long
{
    jrand48(
        __xsubi
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srand48(
    __seedval: c_long
)
{
    srand48(
        __seedval
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_seed48(
    __seed16v: *mut c_ushort
) -> *mut c_ushort
{
    seed48(
        __seed16v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_lcong48(
    __param: *mut c_ushort
)
{
    lcong48(
        __param
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_drand48_r(
    __buffer: *mut drand48_data,
    __result: *mut f64
) -> c_int
{
    drand48_r(
        __buffer,
        __result
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_erand48_r(
    __xsubi: *mut c_ushort,
    __buffer: *mut drand48_data,
    __result: *mut f64
) -> c_int
{
    erand48_r(
        __xsubi,
        __buffer,
        __result
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_lrand48_r(
    __buffer: *mut drand48_data,
    __result: *mut c_long
) -> c_int
{
    lrand48_r(
        __buffer,
        __result
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_nrand48_r(
    __xsubi: *mut c_ushort,
    __buffer: *mut drand48_data,
    __result: *mut c_long
) -> c_int
{
    nrand48_r(
        __xsubi,
        __buffer,
        __result
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mrand48_r(
    __buffer: *mut drand48_data,
    __result: *mut c_long
) -> c_int
{
    mrand48_r(
        __buffer,
        __result
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_jrand48_r(
    __xsubi: *mut c_ushort,
    __buffer: *mut drand48_data,
    __result: *mut c_long
) -> c_int
{
    jrand48_r(
        __xsubi,
        __buffer,
        __result
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srand48_r(
    __seedval: c_long,
    __buffer: *mut drand48_data
) -> c_int
{
    srand48_r(
        __seedval,
        __buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_seed48_r(
    __seed16v: *mut c_ushort,
    __buffer: *mut drand48_data
) -> c_int
{
    seed48_r(
        __seed16v,
        __buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_lcong48_r(
    __param: *mut c_ushort,
    __buffer: *mut drand48_data
) -> c_int
{
    lcong48_r(
        __param,
        __buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_arc4random(

) -> __uint32_t
{
    arc4random(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_arc4random_buf(
    __buf: *mut c_void,
    __size: usize
)
{
    arc4random_buf(
        __buf,
        __size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_arc4random_uniform(
    __upper_bound: __uint32_t
) -> __uint32_t
{
    arc4random_uniform(
        __upper_bound
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_malloc(
    __size: usize
) -> *mut c_void
{
    malloc(
        __size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_calloc(
    __nmemb: usize,
    __size: usize
) -> *mut c_void
{
    calloc(
        __nmemb,
        __size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_realloc(
    __ptr: *mut c_void,
    __size: usize
) -> *mut c_void
{
    realloc(
        __ptr,
        __size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_free(
    __ptr: *mut c_void
)
{
    free(
        __ptr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_reallocarray(
    __ptr: *mut c_void,
    __nmemb: usize,
    __size: usize
) -> *mut c_void
{
    reallocarray(
        __ptr,
        __nmemb,
        __size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_alloca(
    __size: usize
) -> *mut c_void
{
    alloca(
        __size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_valloc(
    __size: usize
) -> *mut c_void
{
    valloc(
        __size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_posix_memalign(
    __memptr: *mut *mut c_void,
    __alignment: usize,
    __size: usize
) -> c_int
{
    posix_memalign(
        __memptr,
        __alignment,
        __size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_aligned_alloc(
    __alignment: usize,
    __size: usize
) -> *mut c_void
{
    aligned_alloc(
        __alignment,
        __size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atexit(
    __func: Option<unsafe extern "C" fn()>
) -> c_int
{
    atexit(
        __func
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_at_quick_exit(
    __func: Option<unsafe extern "C" fn()>
) -> c_int
{
    at_quick_exit(
        __func
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_on_exit(
    __func: Option<unsafe extern "C" fn(__status: c_int, __arg: *mut c_void)>,
    __arg: *mut c_void
) -> c_int
{
    on_exit(
        __func,
        __arg
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_getenv(
    __name: *const c_char
) -> *mut c_char
{
    getenv(
        __name
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_secure_getenv(
    __name: *const c_char
) -> *mut c_char
{
    secure_getenv(
        __name
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_putenv(
    __string: *mut c_char
) -> c_int
{
    putenv(
        __string
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_setenv(
    __name: *const c_char,
    __value: *const c_char,
    __replace: c_int
) -> c_int
{
    setenv(
        __name,
        __value,
        __replace
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_unsetenv(
    __name: *const c_char
) -> c_int
{
    unsetenv(
        __name
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_clearenv(

) -> c_int
{
    clearenv(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mktemp(
    __template: *mut c_char
) -> *mut c_char
{
    mktemp(
        __template
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mkstemp(
    __template: *mut c_char
) -> c_int
{
    mkstemp(
        __template
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mkstemp64(
    __template: *mut c_char
) -> c_int
{
    mkstemp64(
        __template
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mkstemps(
    __template: *mut c_char,
    __suffixlen: c_int
) -> c_int
{
    mkstemps(
        __template,
        __suffixlen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mkstemps64(
    __template: *mut c_char,
    __suffixlen: c_int
) -> c_int
{
    mkstemps64(
        __template,
        __suffixlen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mkdtemp(
    __template: *mut c_char
) -> *mut c_char
{
    mkdtemp(
        __template
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mkostemp(
    __template: *mut c_char,
    __flags: c_int
) -> c_int
{
    mkostemp(
        __template,
        __flags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mkostemp64(
    __template: *mut c_char,
    __flags: c_int
) -> c_int
{
    mkostemp64(
        __template,
        __flags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mkostemps(
    __template: *mut c_char,
    __suffixlen: c_int,
    __flags: c_int
) -> c_int
{
    mkostemps(
        __template,
        __suffixlen,
        __flags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mkostemps64(
    __template: *mut c_char,
    __suffixlen: c_int,
    __flags: c_int
) -> c_int
{
    mkostemps64(
        __template,
        __suffixlen,
        __flags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_system(
    __command: *const c_char
) -> c_int
{
    system(
        __command
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_canonicalize_file_name(
    __name: *const c_char
) -> *mut c_char
{
    canonicalize_file_name(
        __name
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_realpath(
    __name: *const c_char,
    __resolved: *mut c_char
) -> *mut c_char
{
    realpath(
        __name,
        __resolved
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_bsearch(
    __key: *const c_void,
    __base: *const c_void,
    __nmemb: usize,
    __size: usize,
    __compar: __compar_fn_t
) -> *mut c_void
{
    bsearch(
        __key,
        __base,
        __nmemb,
        __size,
        __compar
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_qsort(
    __base: *mut c_void,
    __nmemb: usize,
    __size: usize,
    __compar: __compar_fn_t
)
{
    qsort(
        __base,
        __nmemb,
        __size,
        __compar
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_qsort_r(
    __base: *mut c_void,
    __nmemb: usize,
    __size: usize,
    __compar: __compar_d_fn_t,
    __arg: *mut c_void
)
{
    qsort_r(
        __base,
        __nmemb,
        __size,
        __compar,
        __arg
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_abs(
    __x: c_int
) -> c_int
{
    abs(
        __x
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_labs(
    __x: c_long
) -> c_long
{
    labs(
        __x
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_llabs(
    __x: c_longlong
) -> c_longlong
{
    llabs(
        __x
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_div(
    __numer: c_int,
    __denom: c_int
) -> div_t
{
    div(
        __numer,
        __denom
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ldiv(
    __numer: c_long,
    __denom: c_long
) -> ldiv_t
{
    ldiv(
        __numer,
        __denom
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_lldiv(
    __numer: c_longlong,
    __denom: c_longlong
) -> lldiv_t
{
    lldiv(
        __numer,
        __denom
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ecvt(
    __value: f64,
    __ndigit: c_int,
    __decpt: *mut c_int,
    __sign: *mut c_int
) -> *mut c_char
{
    ecvt(
        __value,
        __ndigit,
        __decpt,
        __sign
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fcvt(
    __value: f64,
    __ndigit: c_int,
    __decpt: *mut c_int,
    __sign: *mut c_int
) -> *mut c_char
{
    fcvt(
        __value,
        __ndigit,
        __decpt,
        __sign
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_gcvt(
    __value: f64,
    __ndigit: c_int,
    __buf: *mut c_char
) -> *mut c_char
{
    gcvt(
        __value,
        __ndigit,
        __buf
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_qecvt(
    __value: u128,
    __ndigit: c_int,
    __decpt: *mut c_int,
    __sign: *mut c_int
) -> *mut c_char
{
    qecvt(
        __value,
        __ndigit,
        __decpt,
        __sign
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_qfcvt(
    __value: u128,
    __ndigit: c_int,
    __decpt: *mut c_int,
    __sign: *mut c_int
) -> *mut c_char
{
    qfcvt(
        __value,
        __ndigit,
        __decpt,
        __sign
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_qgcvt(
    __value: u128,
    __ndigit: c_int,
    __buf: *mut c_char
) -> *mut c_char
{
    qgcvt(
        __value,
        __ndigit,
        __buf
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ecvt_r(
    __value: f64,
    __ndigit: c_int,
    __decpt: *mut c_int,
    __sign: *mut c_int,
    __buf: *mut c_char,
    __len: usize
) -> c_int
{
    ecvt_r(
        __value,
        __ndigit,
        __decpt,
        __sign,
        __buf,
        __len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fcvt_r(
    __value: f64,
    __ndigit: c_int,
    __decpt: *mut c_int,
    __sign: *mut c_int,
    __buf: *mut c_char,
    __len: usize
) -> c_int
{
    fcvt_r(
        __value,
        __ndigit,
        __decpt,
        __sign,
        __buf,
        __len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_qecvt_r(
    __value: u128,
    __ndigit: c_int,
    __decpt: *mut c_int,
    __sign: *mut c_int,
    __buf: *mut c_char,
    __len: usize
) -> c_int
{
    qecvt_r(
        __value,
        __ndigit,
        __decpt,
        __sign,
        __buf,
        __len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_qfcvt_r(
    __value: u128,
    __ndigit: c_int,
    __decpt: *mut c_int,
    __sign: *mut c_int,
    __buf: *mut c_char,
    __len: usize
) -> c_int
{
    qfcvt_r(
        __value,
        __ndigit,
        __decpt,
        __sign,
        __buf,
        __len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mblen(
    __s: *const c_char,
    __n: usize
) -> c_int
{
    mblen(
        __s,
        __n
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mbtowc(
    __pwc: *mut u32,
    __s: *const c_char,
    __n: usize
) -> c_int
{
    mbtowc(
        __pwc,
        __s,
        __n
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wctomb(
    __s: *mut c_char,
    __wchar: u32
) -> c_int
{
    wctomb(
        __s,
        __wchar
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mbstowcs(
    __pwcs: *mut u32,
    __s: *const c_char,
    __n: usize
) -> usize
{
    mbstowcs(
        __pwcs,
        __s,
        __n
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wcstombs(
    __s: *mut c_char,
    __pwcs: *const u32,
    __n: usize
) -> usize
{
    wcstombs(
        __s,
        __pwcs,
        __n
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_rpmatch(
    __response: *const c_char
) -> c_int
{
    rpmatch(
        __response
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_getsubopt(
    __optionp: *mut *mut c_char,
    __tokens: *const *mut c_char,
    __valuep: *mut *mut c_char
) -> c_int
{
    getsubopt(
        __optionp,
        __tokens,
        __valuep
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_posix_openpt(
    __oflag: c_int
) -> c_int
{
    posix_openpt(
        __oflag
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_grantpt(
    __fd: c_int
) -> c_int
{
    grantpt(
        __fd
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_unlockpt(
    __fd: c_int
) -> c_int
{
    unlockpt(
        __fd
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ptsname(
    __fd: c_int
) -> *mut c_char
{
    ptsname(
        __fd
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ptsname_r(
    __fd: c_int,
    __buf: *mut c_char,
    __buflen: usize
) -> c_int
{
    ptsname_r(
        __fd,
        __buf,
        __buflen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_getpt(

) -> c_int
{
    getpt(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_getloadavg(
    __loadavg: *mut f64,
    __nelem: c_int
) -> c_int
{
    getloadavg(
        __loadavg,
        __nelem
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_get_physis_version(

) -> *const c_char
{
    physis_get_physis_version(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_get_libphysis_version(

) -> *const c_char
{
    physis_get_libphysis_version(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_read_file(
    path: *const c_char
) -> physis_Buffer
{
    physis_read_file(
        path
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_gamedata_exists(
    game_data: *mut GameData,
    path: *const c_char
) -> bool
{
    physis_gamedata_exists(
        game_data,
        path
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_gamedata_free_repositories(
    repositories: physis_Repositories
)
{
    physis_gamedata_free_repositories(
        repositories
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_gamedata_extract_file(
    game_data: *mut GameData,
    path: *const c_char
) -> physis_Buffer
{
    physis_gamedata_extract_file(
        game_data,
        path
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_gamedata_free_sheet_header(
    arg1: *mut physis_EXH
)
{
    physis_gamedata_free_sheet_header(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_gamedata_initialize(
    path: *const c_char
) -> *mut GameData
{
    physis_gamedata_initialize(
        path
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_gamedata_free(
    game_data: *mut GameData
)
{
    physis_gamedata_free(
        game_data
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_gamedata_get_repositories(
    game_data: *const GameData
) -> physis_Repositories
{
    physis_gamedata_get_repositories(
        game_data
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_gamedata_read_excel_sheet(
    game_data: *mut GameData,
    name: *const c_char,
    exh: *const physis_EXH,
    language: Language,
    page: c_uint
) -> physis_EXD
{
    physis_gamedata_read_excel_sheet(
        game_data,
        name,
        exh,
        language,
        page
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_gamedata_get_exd_filename(
    name: *const c_char,
    exh: *const physis_EXH,
    language: Language,
    page: c_uint
) -> *const c_char
{
    physis_gamedata_get_exd_filename(
        name,
        exh,
        language,
        page
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_gamedata_free_sheet(
    exd: physis_EXD
)
{
    physis_gamedata_free_sheet(
        exd
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_gamedata_apply_patch(
    gamedata: *const GameData,
    path: *const c_char
) -> bool
{
    physis_gamedata_apply_patch(
        gamedata,
        path
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_gamedata_get_all_sheet_names(
    game_data: *mut GameData
) -> physis_SheetNames
{
    physis_gamedata_get_all_sheet_names(
        game_data
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_bootdata_get_version(
    boot_data: *const BootData
) -> *const c_char
{
    physis_bootdata_get_version(
        boot_data
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_bootdata_initialize(
    path: *const c_char
) -> *mut BootData
{
    physis_bootdata_initialize(
        path
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_bootdata_free(
    boot_data: *mut BootData
)
{
    physis_bootdata_free(
        boot_data
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_bootdata_apply_patch(
    bootdata: *const BootData,
    path: *const c_char
) -> bool
{
    physis_bootdata_apply_patch(
        bootdata,
        path
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_mdl_parse(
    buffer: physis_Buffer
) -> physis_MDL
{
    physis_mdl_parse(
        buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_mdl_write(
    mdl: *const physis_MDL
) -> physis_Buffer
{
    physis_mdl_write(
        mdl
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_mdl_replace_vertices(
    mdl: *mut physis_MDL,
    lod_index: u32,
    part_index: u32,
    num_vertices: u32,
    vertices_ptr: *const Vertex,
    num_indices: u32,
    indices_ptr: *const u16,
    num_submeshes: u32,
    submeshes_ptr: *const SubMesh
)
{
    physis_mdl_replace_vertices(
        mdl,
        lod_index,
        part_index,
        num_vertices,
        vertices_ptr,
        num_indices,
        indices_ptr,
        num_submeshes,
        submeshes_ptr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_get_race_code(
    race: Race,
    subrace: Subrace,
    gender: Gender
) -> i32
{
    physis_get_race_code(
        race,
        subrace,
        gender
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_get_supported_subraces(
    race: Race
) -> physis_SupportedSubraces
{
    physis_get_supported_subraces(
        race
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_gamedata_read_excel_list(
    buffer: physis_Buffer
) -> physis_EXL
{
    physis_gamedata_read_excel_list(
        buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_slot_from_id(
    slot_id: i32
) -> Slot
{
    physis_slot_from_id(
        slot_id
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_get_slot_name(
    slot: Slot
) -> *const c_char
{
    physis_get_slot_name(
        slot
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_build_equipment_path(
    model_id: i32,
    race: Race,
    subrace: Subrace,
    gender: Gender,
    slot: Slot
) -> *const c_char
{
    physis_build_equipment_path(
        model_id,
        race,
        subrace,
        gender,
        slot
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_build_character_path(
    category: CharacterCategory,
    body_ver: i32,
    race: Race,
    subrace: Subrace,
    gender: Gender
) -> *const c_char
{
    physis_build_character_path(
        category,
        body_ver,
        race,
        subrace,
        gender
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_build_skin_material_path(
    race_code: i32,
    body_code: i32,
    material_name: *const c_char
) -> *const c_char
{
    physis_build_skin_material_path(
        race_code,
        body_code,
        material_name
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_build_gear_material_path(
    gear_id: i32,
    gear_version: i32,
    material_name: *const c_char
) -> *const c_char
{
    physis_build_gear_material_path(
        gear_id,
        gear_version,
        material_name
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_build_face_material_path(
    race_code: i32,
    face_code: i32,
    material_name: *const c_char
) -> *const c_char
{
    physis_build_face_material_path(
        race_code,
        face_code,
        material_name
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_build_hair_material_path(
    race_code: i32,
    hair_code: i32,
    material_name: *const c_char
) -> *const c_char
{
    physis_build_hair_material_path(
        race_code,
        hair_code,
        material_name
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_build_ear_material_path(
    race_code: i32,
    ear_code: i32,
    material_name: *const c_char
) -> *const c_char
{
    physis_build_ear_material_path(
        race_code,
        ear_code,
        material_name
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_build_tail_material_path(
    race_code: i32,
    tail_code: i32,
    material_name: *const c_char
) -> *const c_char
{
    physis_build_tail_material_path(
        race_code,
        tail_code,
        material_name
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_blowfish_initialize(
    key: *mut u8,
    key_size: c_uint
) -> *mut Blowfish
{
    physis_blowfish_initialize(
        key,
        key_size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_blowfish_free(
    blowfish: *mut Blowfish
)
{
    physis_blowfish_free(
        blowfish
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_blowfish_encrypt(
    blowfish: *const Blowfish,
    in_data: *mut u8,
    in_data_size: c_uint,
    out_data: *mut *mut u8,
    out_data_size: *mut u32
) -> bool
{
    physis_blowfish_encrypt(
        blowfish,
        in_data,
        in_data_size,
        out_data,
        out_data_size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_blowfish_decrypt(
    blowfish: *const Blowfish,
    in_data: *mut u8,
    in_data_size: c_uint,
    out_data: *mut *mut u8,
    out_data_size: *mut u32
) -> bool
{
    physis_blowfish_decrypt(
        blowfish,
        in_data,
        in_data_size,
        out_data,
        out_data_size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_install_game(
    installer_path: *const c_char,
    game_directory: *const c_char
) -> bool
{
    physis_install_game(
        installer_path,
        game_directory
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_parse_excel_sheet_header(
    buffer: physis_Buffer
) -> *mut physis_EXH
{
    physis_parse_excel_sheet_header(
        buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_parse_skeleton(
    buffer: physis_Buffer
) -> physis_Skeleton
{
    physis_parse_skeleton(
        buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_texture_parse(
    buffer: physis_Buffer
) -> physis_Texture
{
    physis_texture_parse(
        buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_material_parse(
    buffer: physis_Buffer
) -> physis_Material
{
    physis_material_parse(
        buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_parse_shpk(
    buffer: physis_Buffer
) -> physis_SHPK
{
    physis_parse_shpk(
        buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_shpk_get_node(
    shpk: *const physis_SHPK,
    key: u32
) -> physis_SHPKNode
{
    physis_shpk_get_node(
        shpk,
        key
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_shpk_build_selector_from_all_keys(
    system_keys: *const u32,
    system_key_count: u32,
    scene_keys: *const u32,
    scene_key_count: u32,
    material_keys: *const u32,
    material_key_count: u32,
    subview_keys: *const u32,
    subview_key_count: u32
) -> u32
{
    physis_shpk_build_selector_from_all_keys(
        system_keys,
        system_key_count,
        scene_keys,
        scene_key_count,
        material_keys,
        material_key_count,
        subview_keys,
        subview_key_count
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_shpk_crc(
    name: *const c_char
) -> u32
{
    physis_shpk_crc(
        name
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_cmp_parse(
    buffer: physis_Buffer
) -> physis_CMP
{
    physis_cmp_parse(
        buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_cmp_get_racial_scaling_parameters(
    cmp: physis_CMP,
    arg1: Race,
    subrace: Subrace
) -> RacialScalingParameters
{
    physis_cmp_get_racial_scaling_parameters(
        cmp,
        arg1,
        subrace
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_chardat_parse(
    buffer: physis_Buffer
) -> CharacterData
{
    physis_chardat_parse(
        buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_cfg_parse(
    buffer: physis_Buffer
) -> physis_ConfigFile
{
    physis_cfg_parse(
        buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_cfg_set_value(
    cfg: physis_ConfigFile,
    key: *const c_char,
    value: *const c_char
)
{
    physis_cfg_set_value(
        cfg,
        key,
        value
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_cfg_write(
    cfg: physis_ConfigFile
) -> physis_Buffer
{
    physis_cfg_write(
        cfg
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_parse_pbd(
    buffer: physis_Buffer
) -> physis_PBD
{
    physis_parse_pbd(
        buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_pbd_get_deform_matrix(
    pbd: physis_PBD,
    from_body_id: u16,
    to_body_id: u16
) -> physis_PreBoneDeformMatrices
{
    physis_pbd_get_deform_matrix(
        pbd,
        from_body_id,
        to_body_id
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_parse_tera(
    buffer: physis_Buffer
) -> physis_Terrain
{
    physis_parse_tera(
        buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_parse_dictionary(
    buffer: physis_Buffer
) -> physis_Dictionary
{
    physis_parse_dictionary(
        buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_index_parse(
    path: *const c_char
) -> physis_IndexEntries
{
    physis_index_parse(
        path
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_generate_partial_hash(
    name: *const c_char
) -> u32
{
    physis_generate_partial_hash(
        name
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_physis_calculate_hash(
    path: *const c_char
) -> u64
{
    physis_calculate_hash(
        path
    )
}

    